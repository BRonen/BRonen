---
import ArticleCard from "../../components/ArticleCard.astro";
import SearchInput from "../../components/SearchInput.astro";
import Layout from "../../layouts/Layout.astro";
import { getCollection } from "astro:content";

const articleEntries = await getCollection("article");
---

<Layout title="Lorem Ipsum">
  <main>
    <nav>
      <SearchInput placeholder="Search" />
    </nav>

    <h1>Posts</h1>

    <blog-articles-list data-entries={JSON.stringify(articleEntries)}>
      <ul>
        {
          articleEntries.map((articleEntry) => (
            <li class={articleEntry.slug}>
              <ArticleCard entry={articleEntry} />
            </li>
          ))
        }
      </ul>
      <div class="page-links-group">
        <a class="previous-page-link" href="#">&lt;- previous</a>
        <a class="next-page-link" href="#">next -&gt;</a>
      </div>
    </blog-articles-list>
    <hr />
  </main>

  <script type="text/javascript">
    class BlogArticlesList extends HTMLElement {
      pageSize = 1;
      searchInputEl = document.querySelector("input[type=search]");
      previousPageLinkEl = this.querySelector("a.previous-page-link");
      nextPageLinkEl = this.querySelector("a.next-page-link");

      constructor() {
        super();
        const params = new URLSearchParams(document.location.search);

        this.query = params.get("query") || "";
        this.currentPage = parseInt(params.get("page")) || 1;
        this.low = (this.currentPage - 1) * this.pageSize;
        this.high = this.low + this.pageSize;

        this.entries = JSON.parse(this.dataset.entries);

        this.searchInputEl.value = this.query;
        this.searchInputEl.onkeyup = () => {
          this.query = this.searchInputEl.value;
          this.currentPage = 1;

          this.render();
        };

        this.render();
      }

      render() {
        const url = new URL(window.location);
        url.searchParams.set("query", this.query);
        url.searchParams.set("page", this.currentPage);
        history.pushState({}, null, url);

        this.renderEntries();
        this.renderPaginationButtons();

        const entriesLength = this.entries.filter((entry) =>
          entry.data.title.toLowerCase().includes(this.query.toLowerCase())
        );

        if ((this.currentPage + 1) * this.pageSize <= entriesLength.length)
          this.nextPageLinkEl.style.display = "unset";
        else this.nextPageLinkEl.style.display = "none";

        if (this.currentPage > 1)
          this.previousPageLinkEl.style.display = "unset";
        else this.previousPageLinkEl.style.display = "none";
      }

      renderEntries() {
        this.entries.forEach((entry, index) => {
          const itemEl = this.querySelector(`li.${entry.slug}`);
          if (!itemEl) return;
          itemEl.style.display = "none";
        });

        this.entries
          .filter((entry) =>
            entry.data.title.toLowerCase().includes(this.query.toLowerCase())
          )
          .forEach((entry, index) => {
            const itemEl = this.querySelector(`li.${entry.slug}`);

            if (!itemEl) return;

            if (index < this.low || index >= this.high) return;

            itemEl.style.display = "list-item";
          });
      }

      renderPaginationButtons() {
        this.nextPageLinkEl.onclick = () => {
          this.currentPage += 1;
          this.low = (this.currentPage - 1) * this.pageSize;
          this.high = this.low + this.pageSize;
          this.render();
        };

        this.previousPageLinkEl.onclick = () => {
          this.currentPage -= 1;
          this.low = (this.currentPage - 1) * this.pageSize;
          this.high = this.low + this.pageSize;
          this.render();
        };
      }
    }

    customElements.define("blog-articles-list", BlogArticlesList);
  </script>
</Layout>

<style>
  main {
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
    flex-direction: column;
    padding: 1rem 2rem 5rem;
    font-family: monospace;
  }
  main * {
    width: 100%;
  }
  @media (min-width: 767px) {
    main {
      flex-wrap: nowrap;
      padding-top: 5rem;
    }
    main * {
      max-width: 45%;
    }
  }
  nav {
    display: flex;
    justify-content: end;
    margin-bottom: 2.5rem;
  }
  hr {
    color: #00000055;
    width: 40%;
    margin-top: auto;
  }
  main ul {
    width: 100%;
    max-width: none;
    padding: 0;
    list-style-type: none;
  }
  main ul li {
    display: none;
    max-width: none;
  }
  .page-links-group {
    display: flex;
    justify-content: space-between;
    width: 100%;
    max-width: unset;
  }
  .page-links-group .next-page-link,
  .page-links-group .previous-page-link {
    display: none;
    width: 10rem;
    font-size: 1rem;
    margin-top: 1rem;
  }
  .page-links-group .next-page-link {
    text-align: end;
    margin-left: auto;
  }
</style>
